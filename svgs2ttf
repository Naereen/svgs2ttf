#!/usr/bin/fontforge -script

import sys
import os.path
import json

IMPORT_OPTIONS = ('removeoverlap', 'correctdir')

try:
    unicode
except NameError:
    unicode = str

try:
    unichr
except NameError:
    unichr = chr


def hex_of_str(one_or_more_hex):
    if not '_' in one_or_more_hex:
        return [int(one_or_more_hex, 0)]
    else:
        return [int(c, 0) for c in one_or_more_hex.split('_')]


def loadConfig(filename='font.json'):
    with open(filename) as f:
        return json.load(f)


def setProperties(font, config):
    props = config['props']
    lang = props.pop('lang', 'English (US)')
    family = props.pop('family', None)
    style = props.pop('style', 'Regular')
    props['encoding'] = props.get('encoding', 'UnicodeFull')
    if family is not None:
        font.familyname = family
        font.fontname = family + '-' + style
        font.fullname = family + ' ' + style
    for k, v in config['props'].items():
        if hasattr(font, k):
            if isinstance(v, list):
                v = tuple(v)
            setattr(font, k, v)
        else:
            font.appendSFNTName(lang, k, v)
    for t in config.get('sfnt_names', []):
        font.appendSFNTName(str(t[0]), str(t[1]), unicode(t[2]))


# ---
# See https://en.wikipedia.org/wiki/Private_Use_Areas

unicode_private_area_start_point = ord(u'\uE000')
unicode_private_area = unicode_private_area_start_point

def next_private():
    global unicode_private_area
    unicode_private_area += 1
    return unichr(unicode_private_area - 1)


# ---

def addGlyphs(font, config):
    for k, v in config['glyphs'].items():
        print("\nAdding glyph for character '{}' with path '{}'...".format(k, v))  # DEBUG
        ks = hex_of_str(k)
        if len(ks) == 1:
            # only one char, it has a unicode encoding
            true_unicode_enc = ks[0]
            print("Adding a glyph for a unicode symbol of encoding '{}' for symbol '{}' = '{}'...".format(true_unicode_enc, k, chr(int(k, 0))))  # DEBUG
            g = font.createMappedChar(true_unicode_enc)
        else:
            # more than one char, so a ligature glyph

            # # we use a private unicode encoding
            # private_unicode_enc = next_private()
            # print(u"Trying to add a glyph for a custom unicode symbol of encoding {}...".format(private_unicode_enc))  # DEBUG

            try:
                # name = "i_j"  # for instance
                name = "_".join(chr(int(i, 0)) for i in k.split('_'))
            except:
                # name = uni0D15_uni0D4D_uni0D15  # for instance
                name = "_".join("uni{:0>4}".format(c.replace('0x','')) for c in k.split('_'))
            print(u"Trying to add a glyph for a custom name '{}'...".format(name))  # DEBUG
            g = font.createChar(-1, name)  # XXX How to give it a name?
            g.glyphclass = 'baseligature'

            tuple_of_name = tuple(name)
            g.addPosSub('ligatureshi', tuple_of_name)

        # Get outlines
        src = '%s.svg' % k
        if not isinstance(v, dict):
            v = {'src': v or src}
        src = '%s%s%s' % (config.get('input', '.'), os.path.sep, v.pop('src', src))
        g.importOutlines(src, IMPORT_OPTIONS)
        g.removeOverlap()

        # Copy attributes
        for k2, v2 in v.items():
            print("For this key = '{}', and this value = '{}'...".format(k2, v2))  # DEBUG
            if hasattr(g, k2):
                if isinstance(v2, list) and isinstance(v2[0], list):
                    # v2 = tuple(tuple(v2i) for v2i in v2)
                    # print("Adding tuple of tuples as attribute... v2 = '{}'...".format(v2))  # DEBUG
                    assert k2 == "anchorPoints"
                    for (anchor_class_name, anchor_type, x, y, i) in v2:
                        print("Adding this anchorPoint:", (anchor_class_name, anchor_type, x, y, i))  # DEBUG
                        g.addAnchorPoint(anchor_class_name, anchor_type, x, y, i)
                elif isinstance(v2, list):
                    v2 = tuple(v2)
                    print("Adding tuple as attribute... v2 = '{}'...".format(v2))  # DEBUG
                    setattr(g, k2, v2)
                else:
                    print("Adding a single attribute...")  # DEBUG
                    setattr(g, k2, v2)
        print("Glyph name: '{}' and class '{}' (type {})...".format(g.glyphname, g.glyphclass, type(g.glyphclass)))  # DEBUG


def main(config_file):
    config = loadConfig(config_file)
    os.chdir(os.path.dirname(config_file) or '.')
    font = fontforge.font()
    # https://stackoverflow.com/a/35466349/
    font.addLookup('ligatures', 'gsub_ligature', (), [['rlig', [['arab', ['dflt']]]]])
    font.addLookupSubtable('ligatures', 'ligatureshi')
    # XXX
    setProperties(font, config)
    addGlyphs(font, config)
    for outfile in config['output']:
        sys.stderr.write('Generating %s...\n' % outfile)
        font.generate(outfile)


if __name__ == '__main__':
    if len(sys.argv) > 1:
        main(sys.argv[1])
    else:
        sys.stderr.write("\nUsage: %s something.json\n" % sys.argv[0] )

# vim: set filetype=python:
